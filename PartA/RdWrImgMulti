package projecta;

/**
 * @author jaask
 */

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.awt.image.DataBufferByte;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class RdWrImgMulti {

    public static short[][] grayImage;
    public static int width;
    public static int height;
    private static BufferedImage image;
    private static final Object lock = new Object();
    private static double globalMinimum = Double.MAX_VALUE;

    public static void main(String[] args) {
        String fileNameInp = "TenCardG.jpg";
        String fileNameOutMulti = "TenCardG_multi.jpg";

        readColourImage(fileNameInp);

        String templateFileName = "OneG.jpg";
        BufferedImage templateImage = readTemplateImage(templateFileName);

        // Print the dimensions of the source and template images
        System.out.println("Source image dimensions: " + width + "x" + height);
        System.out.println("Template image dimensions: " + templateImage.getWidth() + "x" + templateImage.getHeight());

        // Multi-threaded execution
        long startTime = System.nanoTime();
        int[][] matchLocationsMulti = parallel_template_matching(templateImage, image);
        long endTime = System.nanoTime();
        long duration = (endTime - startTime) / 1000000; // Convert to milliseconds

        // Print the number of matches found and execution time
        System.out.println("Multi-threaded execution:");
        System.out.println("Number of matches found: " + matchLocationsMulti.length);
        System.out.println("Execution time: " + duration + " ms");

        for (int[] loc : matchLocationsMulti) {
            System.out.println("Match found at: (" + loc[0] + ", " + loc[1] + ")");
        }

        writeColourImage(fileNameOutMulti, matchLocationsMulti, templateImage.getWidth(), templateImage.getHeight());
        System.out.println(">> Multi-threaded completed! Check the rectangles on the generated " + fileNameOutMulti + " image under this project folder");
    }

    public static void readColourImage(String fileName) {
        try {
            byte[] pixels;

            File inp = new File(fileName);
            image = ImageIO.read(inp);
            width = image.getWidth();
            height = image.getHeight();

            pixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
            
            grayImage = new short[height][width];
            int coord;
            for (int i = 0; i < height; i++)
                for (int j = 0; j < width; j++) {
                    coord = 3 * (i * width + j);
                    int pr = ((short) pixels[coord] & 0xff); // red
                    int pg = (((short) pixels[coord + 1] & 0xff)); // green
                    int pb = (((short) pixels[coord + 2] & 0xff)); // blue

                    grayImage[i][j] = (short) Math.round(0.299 * pr + 0.587 * pg + 0.114 * pb);
                }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static BufferedImage readTemplateImage(String fileName) {
        try {
            File inp = new File(fileName);
            return ImageIO.read(inp);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    public static int[][] parallel_template_matching(BufferedImage template, BufferedImage source) {
        int r1 = source.getHeight();
        int c1 = source.getWidth();
        int r2 = template.getHeight();
        int c2 = template.getWidth();
        int tempSize = r2 * c2;
        int numThreads = 4;
        ExecutorService executor = Executors.newFixedThreadPool(numThreads);

        short[][] sourceGray = convertToGrayscale(source);
        short[][] templateGray = convertToGrayscale(template);
        double[][] absDiffMat = new double[r1 - r2 + 1][c1 - c2 + 1];
        boolean[][] matchedRegions = new boolean[r1][c1];

        List<Future<?>> futures = new ArrayList<>();
        for (int i = 0; i <= r1 - r2; i++) {
            final int row = i;
            futures.add(executor.submit(() -> {
                for (int j = 0; j <= c1 - c2; j++) {
                    double absDiff = 0;
                    for (int ti = 0; ti < r2; ti++) {
                        for (int tj = 0; tj < c2; tj++) {
                            absDiff += Math.abs(sourceGray[row + ti][j + tj] - templateGray[ti][tj]);
                        }
                    }
                    absDiff /= tempSize;
                    absDiffMat[row][j] = absDiff;
                    synchronized (lock) {
                        if (absDiff < globalMinimum) {
                            globalMinimum = absDiff;
                        }
                    }
                }
            }));
        }

        for (Future<?> future : futures) {
            try {
                future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        executor.shutdown();

        double ratio = 10; // for calibration
        double threshold = ratio * globalMinimum;

        // Collect coordinates of matches
        List<int[]> matchList = new ArrayList<>();
        for (int i = 0; i <= r1 - r2; i++) {
            for (int j = 0; j <= c1 - c2; j++) {
                if (absDiffMat[i][j] <= threshold && !isRegionMatched(matchedRegions, i, j, r2, c2)) {
                    matchList.add(new int[]{j, i});
                    markRegionAsMatched(matchedRegions, i, j, r2, c2);
                }
            }
        }

        return matchList.toArray(new int[0][]);
    }

    public static boolean isRegionMatched(boolean[][] matchedRegions, int x, int y, int rectWidth, int rectHeight) {
        for (int i = 0; i < rectHeight; i++) {
            for (int j = 0; j < rectWidth; j++) {
                if (matchedRegions[y + i][x + j]) {
                    return true;
                }
            }
        }
        return false;
    }

    public static void markRegionAsMatched(boolean[][] matchedRegions, int x, int y, int rectWidth, int rectHeight) {
        for (int i = 0; i < rectHeight; i++) {
            for (int j = 0; j < rectWidth; j++) {
                matchedRegions[y + i][x + j] = true;
            }
        }
    }

    public static short[][] convertToGrayscale(BufferedImage image) {
        int width = image.getWidth();
        int height = image.getHeight();
        short[][] grayImage = new short[height][width];
        byte[] pixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();

        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                int coord = 3 * (i * width + j);
                int pr = ((short) pixels[coord] & 0xff); // red
                int pg = (((short) pixels[coord + 1] & 0xff)); // green
                int pb = (((short) pixels[coord + 2] & 0xff)); // blue

                grayImage[i][j] = (short) Math.round(0.299 * pr + 0.587 * pg + 0.114 * pb);
            }
        }
        return grayImage;
    }

    public static void writeColourImage(String fileName, int[][] matchLocations, int rectWidth, int rectHeight) {
        try {
            BufferedImage bi = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics2D g2D = bi.createGraphics();
            g2D.drawImage(image, 0, 0, null);
            g2D.setColor(Color.BLACK);

            // Set the stroke to make the rectangles thinner
            g2D.setStroke(new BasicStroke(1));

            for (int[] loc : matchLocations) {
                g2D.drawRect(loc[0], loc[1], rectWidth, rectHeight);
            }

            g2D.dispose();
            ImageIO.write(bi, "jpg", new File(fileName));

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
